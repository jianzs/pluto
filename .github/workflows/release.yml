name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions: {} #reset
jobs:
  release:
    # prevent this action from running on forks
    if: github.repository == 'pluto-lang/pluto'
    permissions:
      contents: write # to create release (changesets/action)
      pull-requests: write # to create pull request (changesets/action)
    name: Release
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
      cliPublished: ${{ steps.check-cli-publish.outputs.published }}
    steps:
      - name: Install Graphviz
        run: sudo apt-get install -y graphviz

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Prepare dependent packages
        run: bash scripts/prepare.sh

      - name: Install Dependencies
        run: pnpm install && pip install -r requirements.txt

      - name: Creating .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Send a Slack notification if a publish happens
        if: steps.changesets.outputs.published == 'true'
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: "C061XR86079"
          # For posting a simple plain text message
          slack-message: >
            A new version of ${GITHUB_REPOSITORY} was published: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}. 
            Published packages: ${{ steps.changesets.outputs.publishedPackages }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Check if @plutolang/cli is published
        if: steps.changesets.outputs.published == 'true'
        id: check-cli-publish
        run: |
          if [[ "${RELEASE_PACKAGES}" == *"@plutolang/cli"* ]]; then
            echo "@plutolang/cli is published!"
            echo "published=true" >> "$GITHUB_OUTPUT"
          else
            echo "@plutolang/cli is not published!"
            echo "published=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          RELEASE_PACKAGES: ${{ toJSON(steps.changesets.outputs.publishedPackages) }}

  build-docker-images:
    name: Build Docker Images
    needs: release
    if: needs.release.outputs.cliPublished == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: plutolang
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Run Build Script
        run: |
          version=$(echo "${RELEASE_PACKAGES}" | jq -r '.[] | select(.name == "@plutolang/cli") | .version')
          bash ./scripts/build-docker-images.sh --pluto $version
        env:
          RELEASE_PACKAGES: ${{ toJSON(needs.release.outputs.publishedPackages) }}

  bump-pluto-codesandbox:
    name: Bump Pluto Version in CodeSandbox
    needs: release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Send an bump pluto version event to codesandbox repository
        run: |
          curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/pluto-lang/codesandbox/dispatches" \
              -d '{ "event_type": "trigger-bump-pluto", "client_payload": { "packages": '${RELEASE_PACKAGES}' } }'
        env:
          GITHUB_TOKEN: ${{ secrets.PLUTO_CODESANDBOX_WORKFLOW_GITHUB_TOKEN }}
          RELEASE_PACKAGES: ${{ toJSON(needs.release.outputs.publishedPackages) }}
